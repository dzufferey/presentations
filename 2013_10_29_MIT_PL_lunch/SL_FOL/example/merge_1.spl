var data: Fld<Int>;

var
next: Fld<Loc>;

predicate llseg(data: Fld<Int>, next: Fld<Loc>, x_1: Loc, y_1: Loc, ub: Int)
{
  x_1 == y_1 ||
  x_1 != y_1 &*& cell(x_1) &*& x_1.data <= ub &*&
    llseg(data, next, x_1.next, y_1, ub)
}


predicate lseg(next: Fld<Loc>, x_2: Loc, y_2: Loc)
{
  x_2 == y_2 || x_2 != y_2 &*& cell(x_2) &*& lseg(next, x_2.next, y_2)
}


predicate
  lslseg(data: Fld<Int>, next: Fld<Loc>, x_3: Loc, y_3: Loc, ub_1: Int)
{
  slseg(data, next, x_3, y_3) && llseg(data, next, x_3, y_3, ub_1)
}


predicate slseg(data: Fld<Int>, next: Fld<Loc>, x_4: Loc, y_4: Loc)
{
  x_4 == y_4 ||
  x_4 != y_4 &*& cell(x_4) &*& uslseg(data, next, x_4.next, y_4, x_4.data)
}


predicate uslseg(data: Fld<Int>, next: Fld<Loc>, x_5: Loc, y_5: Loc, lb: Int)
{
  x_5 == y_5 ||
  x_5 != y_5 &*& cell(x_5) &*& lb <= x_5.data &*&
    uslseg(data, next, x_5.next, y_5, x_5.data)
}


procedure merge(a: Loc, b: Loc) returns (res: Loc) 
locals (last: Loc)
/* precondition of merge */
requires slseg(data, next, a, null) &*& slseg(data, next, b, null);
/* postcondition of merge */
ensures slseg(data, next, res, null);
{
  res := null;
  choose
  {
    /* if then */
    assume a == null;
    return b;
  }
  or
  {
    /* if else */
    assume a != null;
    choose
    {
      /* if then */
      assume b == null;
      return a;
    }
    or
    {
      /* if else */
      assume b != null;
      choose
      {
        /* if then */
        assume a.data <= b.data;
        res := a;
        a := a.next;
      }
      or
      {
        /* if else */
        assume !(a.data <= b.data);
        res := b;
        b := b.next;
      }
    }
  }
  havoc last;
  last := res;
  res, last, b, a := call merge_loop(res, last, b, a);
  return res;
}

procedure merge_loop(res_init: Loc, last_init: Loc, b_init: Loc, a_init: Loc) 
returns (res: Loc, last: Loc, b: Loc, a: Loc) 
locals ()
/* invariant */
requires last_init.next == a_init &*& cell(last_init) ||
  last_init.next == b_init &*& cell(last_init);
/* invariant */
requires lslseg(data, next, res_init, last_init, last_init.data) &*&
  uslseg(data, next, a_init, null, last_init.data) &*&
  uslseg(data, next, b_init, null, last_init.data);
/* loop exit condition of merge_loop */
free ensures !(a != null || b != null);
/* invariant */
free ensures last.next == a &*& cell(last) || last.next == b &*& cell(last);
/* invariant */
free ensures lslseg(data, next, res, last, last.data) &*&
  uslseg(data, next, a, null, last.data) &*&
  uslseg(data, next, b, null, last.data);
/* framecondition of merge_loop */
free ensures res == res_init;
{
  res, last, b, a := res_init, last_init, b_init, a_init;
  choose
  {
    /* if then */
    assume a != null || b != null;
    choose
    {
      /* if then */
      assume a == null || b != null && a.data > b.data;
      next := next[last := b];
      last := b;
      b := b.next;
    }
    or
    {
      /* if else */
      assume !(a == null || b != null && a.data > b.data);
      next := next[last := a];
      last := a;
      a := a.next;
    }
    res, last, b, a := call merge_loop(res, last, b, a);
  }
  or
  /* if else */
  assume !(a != null || b != null);
}

procedure merge_sort(lst: Loc) returns (res_1: Loc) 
locals (lst2: Loc, lst1: Loc, b_1: Loc, a_1: Loc)
/* precondition of merge_sort */
requires lseg(next, lst, null);
/* postcondition of merge_sort */
ensures slseg(data, next, res_1, null);
{
  havoc lst1, lst2;
  lst1, lst2 := call split(lst);
  havoc a_1;
  a_1 := call merge_sort(lst1);
  havoc b_1;
  b_1 := call merge_sort(lst2);
  res_1 := call merge(a_1, b_1);
  return res_1;
}

procedure split(x: Loc) returns (y: Loc, z: Loc) 
locals (tmp: Loc, curr: Loc)
/* precondition of split */
requires lseg(next, x, null);
/* postcondition of split */
ensures lseg(next, y, null) &*& lseg(next, z, null);
{
  y, z := x, x;
  havoc curr;
  curr := x;
  z, y, curr := call split_loop(z, y, curr);
  choose
  {
    /* if then */
    assume z != null;
    havoc tmp;
    tmp := z;
    z := z.next;
    next := next[tmp := null];
  }
  or
  /* if else */
  assume z == null;
}

procedure split_loop(z_init: Loc, y_init: Loc, curr_init: Loc) 
returns (z: Loc, y: Loc, curr: Loc) 
locals ()
/* invariant */
requires lseg(next, y_init, z_init) &*& lseg(next, z_init, curr_init) &*&
  lseg(next, curr_init, null);
/* loop exit condition of split_loop */
free ensures curr == null;
/* invariant */
free ensures lseg(next, y, z) &*& lseg(next, z, curr) &*& lseg(next, curr, null);
/* framecondition of split_loop */
free ensures y == y_init;
{
  z, y, curr := z_init, y_init, curr_init;
  choose
  {
    /* if then */
    assume curr != null;
    z := z.next;
    curr := curr.next;
    choose
    {
      /* if then */
      assume curr != null;
      curr := curr.next;
    }
    or
    /* if else */
    assume curr == null;
    z, y, curr := call split_loop(z, y, curr);
  }
  or
  /* if else */
  assume curr == null;
}

