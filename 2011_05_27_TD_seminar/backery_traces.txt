full version:

initial state: pc1 = 0, x1 = 0, pc2 = 0, x2 = 0
    while (true) {                                    |   while (true) {
1     if (pc1 == 0) {                                 |     if (pc2 == 0) {
2       x1 = x2 + 1;                                  |       x2 = x1 + 1;
3       pc1 = 1;                                      |       pc2 = 1;
4     } else if (pc1 == 1 && (x2 == 0 || x1 < x2)) {  |     } else if (pc2 == 1 && (x1 == 0 || x2 < x1)) {
5       pc1 = 2;                                      |       pc2 = 2;
6     } else if (pc1 == 2) {                          |     } else if (pc2 == 2) {
7       pc1 = 0;                                      |       pc2 = 0;
8       x1 = 0;                                       |       x2 = 0;
      }                                               |     }
9     if (pc1 == 2 && pc2 == 2) {                     |     if (pc1 == 2 && pc2 == 2) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }
========================================================================
first version:

predicates: -

initial state: ???????, ??????, ???????, ??????
    while (true) {                                    |   while (true) {
1     if (????????) {                                 |     if (????????) {
2       ???????????;                                  |       ???????????;
3       ???????;                                      |       ???????;
4     } else if (???????? && (??????? || ???????)) {  |     } else if (???????? && (??????? || ???????)) {
5       ???????;                                      |       ???????;
6     } else if (????????) {                          |     } else if (????????) {
7       ???????;                                      |       ???????;
8       ??????;                                       |       ??????;
      }                                               |     }
9     if (???????? && ????????) {                     |     if (???????? && ????????) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }

TODO reachability tree

error trace: 1_1, 2_1, 3_1, 9_1, 10_1

concrete path:
i   pc1 = 0, x1 = 0, pc2 = 0, x2 = 0;
1   assume(pc1 == 0);
2   x1 = x2 + 1;
3   pc1 = 1;
9   assume(pc1 == 2 && pc2 == 2);
10  ERROR: goto ERROR;

SSA path + interpolant:
i   pc1 = 0 && x1 = 0 && pc2 = 0 && x2 = 0
                            true
1   pc1 = 0
                            true
2   x1' = x2 + 1
                            true
3   pc1' = 1
                            pc1' = 1
9   pc1' = 2 && pc2 = 2
                            false
10  
========================================================================
second version:

predicates: pc1 = 1

initial state: pc1 = 0, ??????, ???????, ??????
    while (true) {                                    |   while (true) {
1     if (pc1 == 0) {                                 |     if (????????) {
2       ???????????;                                  |       ???????????;
3       pc1 = 1;                                      |       ???????;
4     } else if (pc1 == 1 && (??????? || ???????)) {  |     } else if (???????? && (??????? || ???????)) {
5       pc1 = 2;                                      |       ???????;
6     } else if (pc1 == 2) {                          |     } else if (????????) {
7       pc1 = 0;                                      |       ???????;
8       ??????;                                       |       ??????;
      }                                               |     }
9     if (pc1 == 2 && ????????) {                     |     if (pc1 == 2 && ????????) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }

TODO reachability tree

error trace: 1_1, 2_1, 3_1, 4_1, 5_1, 9_1, 10_1

concrete path:
i   pc1 = 0, x1 = 0, pc2 = 0, x2 = 0;
1   assume(pc1 == 0);
2   x1 = x2 + 1;
3   pc1 = 1;
4   assume(pc1 == 1 && (x2 == 0 || x1 < x2));
5   pc1 = 2;
9   assume(pc1 == 2 && pc2 == 2)
10  ERROR: goto ERROR;

SSA path + interpolant:
i   pc1 = 0 && x1 = 0 && pc2 = 0 && x2 = 0
                            pc2 = 0
1   pc1 = 0
                            pc2 = 0
2   x1' = x2 + 1
                            pc2 = 0
3   pc1' = 1
                            pc2 = 0
4   pc1' = 1 && (x2 = 0 || x1' < x2)
                            pc2 = 0
5   pc1'' = 2;
                            pc2 = 0
9   pc1'' = 2 && pc2 = 2
                            false
10  

========================================================================
third version:

predicates: pc1 = 1, pc2 = 0

initial state: pc1 = 0, ??????, pc2 = 0, ??????
    while (true) {                                    |   while (true) {
1     if (pc1 == 0) {                                 |     if (pc2 == 0) {
2       ???????????;                                  |       ???????????;
3       pc1 = 1;                                      |       pc2 = 1;
4     } else if (pc1 == 1 && (??????? || ???????)) {  |     } else if (pc2 == 1 && (??????? || ???????)) {
5       pc1 = 2;                                      |       pc2 = 2;
6     } else if (pc1 == 2) {                          |     } else if (pc2 == 2) {
7       pc1 = 0;                                      |       pc2 = 0;
8       ??????;                                       |       ??????;
      }                                               |     }
9     if (pc1 == 2 && pc2 == 2) {                     |     if (pc1 == 2 && pc2 == 2) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }

TODO reachability tree

error trace: 1_1, 2_1, 3_1, 4_1, 5_1, 1_2, 2_2, 3_2, 9_1, 10_1

concrete path:
i   pc1 = 0, x1 = 0, pc2 = 0, x2 = 0;
1_1   assume(pc1 == 0);
2_1   x1 = x2 + 1;
3_1   pc1 = 1;
4_1   assume(pc1 == 1 && (x2 == 0 || x1 < x2));
5_1   pc1 = 2;
1_2   assume(pc2 == 0);
2_2   x2 = x1 + 1;
3_2   pc2 = 1;
9_1   assume(pc1 == 2 && pc2 == 2)
10_1  ERROR: goto ERROR;

SSA path + interpolant:
i   pc1 = 0 && x1 = 0 && pc2 = 0 && x2 = 0
                            true
1_1 pc1 = 0
                            true
2_1 x1' = x2 + 1
                            true
3_1 pc1' = 1
                            true
4_1 pc1' = 1 && (x2 = 0 || x1' < x2)
                            true
5_1 pc1'' = 2;
                            true
1_2 pc2 = 0
                            true
2_2 x2' = x1' + 1
                            true
3_2 pc2' = 1
                            pc2' = 1
9_1 pc1'' = 2 && pc2' = 2
                            false
10_1


========================================================================
fifth version: (fourth gives pc1 = 0)

predicates: pc1 = 1, pc2 = 0, pc2 = 1, pc1 = 0

initial state: pc1 = 0, ??????, pc2 = 0, ??????
    while (true) {                                    |   while (true) {
1     if (pc1 == 0) {                                 |     if (pc2 == 0) {
2       ???????????;                                  |       ???????????;
3       pc1 = 1;                                      |       pc2 = 1;
4     } else if (pc1 == 1 && (??????? || ???????)) {  |     } else if (pc2 == 1 && (??????? || ???????)) {
5       pc1 = 2;                                      |       pc2 = 2;
6     } else if (pc1 == 2) {                          |     } else if (pc2 == 2) {
7       pc1 = 0;                                      |       pc2 = 0;
8       ??????;                                       |       ??????;
      }                                               |     }
9     if (pc1 == 2 && pc2 == 2) {                     |     if (pc1 == 2 && pc2 == 2) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }

TODO reachability tree

error trace: 1_1, 2_1, 3_1, 4_1, 5_1, 1_2, 2_2, 3_2, 4_2, 5_2, 9_1, 10_1

concrete path:
i     pc1 = 0, x1 = 0, pc2 = 0, x2 = 0;
1_1   assume(pc1 == 0);
2_1   x1 = x2 + 1;
3_1   pc1 = 1;
4_1   assume(pc1 == 1 && (x2 == 0 || x1 < x2));
5_1   pc1 = 2;
1_2   assume(pc2 == 0);
2_2   x2 = x1 + 1;
3_2   pc2 = 1;
4_2   assume(pc2 == 1 && (x1 == 0 || x2 < x1));
5_2   pc2 = 2;
9_1   assume(pc1 == 2 && pc2 == 2)
10_1  ERROR: goto ERROR;

SSA path + interpolant:
i   pc1 = 0 && x1 = 0 && pc2 = 0 && x2 = 0
                            x2 = 0
1_1 pc1 = 0
                            x2 = 0
2_1 x1' = x2 + 1
                            x1' = 1 && x2 = 0
3_1 pc1' = 1
                            x1' = 1 && x2 = 0
4_1 pc1' = 1 && (x2 = 0 || x1' < x2)
                            x1' = 1
5_1 pc1'' = 2;
                            x1' = 1
1_2 pc2 = 0
                            x1' = 1
2_2 x2' = x1' + 1
                            x1' = 1 && x2' = 2
3_2 pc2' = 1
                            x1' = 1 && x2' = 2
4_2 pc2'= 1 && (x1' = 0 || x2' < x1')
                            false
5_2 pc2'' = 2;
                            false
9_1 pc1'' = 2 && pc2'' = 2
                            false
10_1

========================================================================
sixth version: first try (assume we also did the symmetric trace)

predicates: pc1 = 1, pc2 = 0, pc2 = 1, pc1 = 0, x2 = 0, x1 = 1, x2 = 0, x2 = 2, x2 = 1, x1 = 0, x1 = 2

initial state: pc1 = 0, x1 = 0, pc2 = 0, x2 = 0
    while (true) {                                    |   while (true) {
1     if (pc1 == 0) {                                 |     if (pc2 == 0) {
2       x1 = x2 + 1;                                  |       x2 = x1 + 1;
3       pc1 = 1;                                      |       pc2 = 1;
4     } else if (pc1 == 1 && (x2 == 0 || x1 < x2)) {  |     } else if (pc2 == 1 && (x1 == 0 || x2 < x1)) {
5       pc1 = 2;                                      |       pc2 = 2;
6     } else if (pc1 == 2) {                          |     } else if (pc2 == 2) {
7       pc1 = 0;                                      |       pc2 = 0;
8       x1 = 0;                                       |       x2 = 0;
      }                                               |     }
9     if (pc1 == 2 && pc2 == 2) {                     |     if (pc1 == 2 && pc2 == 2) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }

TODO reachability tree

error trace: 1_1, 2_1, 3_1, 1_2, 2_2, 3_2,
             4_1, 5_1, 6_1, 7_1, 8_1, 1_1, 2_1, 3_1,
             4_2, 5_2, 6_2, 7_2, 8_2, 1_2, 2_2, 3_2,
             4_1, 5_1, 4_2, 5_2, 9_1, 10_1

needs to count up to 4 ...
can unfold this as much as you want ...

The problem here is that we introduce predicates that are too strong, we need something weaker.
Let's going back to the previous refinement step:

SSA path + interpolant:
i   pc1 = 0 && x1 = 0 && pc2 = 0 && x2 = 0
                            x2 = 0
1_1 pc1 = 0
                            x2 = 0
2_1 x1' = x2 + 1
                            x1' > x2 && x2 = 0
3_1 pc1' = 1
                            x1' > x2 && x2 = 0
4_1 pc1' = 1 && (x2 = 0 || x1' < x2)
                            x1' > 0
5_1 pc1'' = 2;
                            x1' > 0
1_2 pc2 = 0
                            x1' > 0
2_2 x2' = x1' + 1
                            x1' > 0 && x2' > x1'
3_2 pc2' = 1
                            x1' > 0 && x2' > x1'
4_2 pc2'= 1 && (x1' = 0 || x2' < x1')
                            false
5_2 pc2'' = 2;
                            false
9_1 pc1'' = 2 && pc2'' = 2
                            false
10_1

========================================================================
sixth version: second try (assume we also did the symmetric trace)

predicates: pc1 = 1, pc2 = 0, pc2 = 1, pc1 = 0, x1 = 0, x2 = 1, x1 > x2, x2 < x1

initial state: pc1 = 0, x1 = 0, pc2 = 0, x2 = 0
    while (true) {                                    |   while (true) {
1     if (pc1 == 0) {                                 |     if (pc2 == 0) {
2       x1 = x2 + 1;                                  |       x2 = x1 + 1;
3       pc1 = 1;                                      |       pc2 = 1;
4     } else if (pc1 == 1 && (x2 == 0 || x1 < x2)) {  |     } else if (pc2 == 1 && (x1 == 0 || x2 < x1)) {
5       pc1 = 2;                                      |       pc2 = 2;
6     } else if (pc1 == 2) {                          |     } else if (pc2 == 2) {
7       pc1 = 0;                                      |       pc2 = 0;
8       x1 = 0;                                       |       x2 = 0;
      }                                               |     }
9     if (pc1 == 2 && pc2 == 2) {                     |     if (pc1 == 2 && pc2 == 2) {
10      ERROR: goto ERROR;                            |       ERROR: goto ERROR;
      }                                               |     }
    }                                                 |   }


CFA:
t1: 0 == assume(pc1 == 0); x1 = x2 + 1; pc1 = 1; ==> 1
t2: 0 == assume(pc1 == 1 || (x2 == 0 || x1 < x2)); pc1 = 2; ==> 1
t3: 0 == assume(pc1 == 2); pc1 = 0; x1 = 0; ==> 1
t4: 0 == assume(pc1 != 0 && (pc1 != 1 || (x2 != 0 && x1 >= x2)) && pc1 != 2); ==> 1
t5: 1 == assume(pc1 != 2 || pc2 != 2) ==> 0
t6: 1 == assume(pc1 == 2 && pc2 == 2) ==> error
same for process 1

abstract reachability tree:

states:         pc1 = 0, pc1 = 1, pc2 = 0, pc2 = 1, x1 = 0, x2 = 0, x1 > x2, x2 < x1
0   ( 0,  0)    true     false    true     false    true    true    false    false
1   ( 1,  0)    false    true     true     false    false   true    true     false
2   ( 0,  1)    true     false    false    true     true    false   false    true 
3   ( 0,  0)    false    true     true     false    false   true    true     false
4   ( 0,  0)    true     false    false    true     true    false   false    true 
5   ( 1,  0)    false    false    true     false    false   true    true     false
6   ( 0,  1)    false    true     false    true     false   false   false    true 

total state space: 3^2 * 2^8 = 9 * 256 = 2304
what we probably need (if safe): 432 

transition:
0 -- t1_1 -> 1
0 -- t1_2 -> 2
1 -- t5_1 -> 3
2 -- t5_2 -> 4
3 -- t2_1 -> 5
3 -- t1_2 -> 6

worklist: 1, 2, 3, | 4, 5, 6

even more compact:
t1: 0 == assume(pc1 == 0); x1 = x2 + 1; pc1 = 1; ==> 0
t2: 0 == assume(pc1 == 1 || (x2 == 0 || x1 < x2)); pc1 = 2; ==> 0
t3: 0 == assume(pc1 == 2); pc1 = 0; x1 = 0; ==> 0
t4: 0 == assume(pc1 == 2 && pc2 == 2) ==> error
total state space: 2^2 * 2*8 = 1024
what we probably need (if safe): 3^3 * 2 = 54

sid: pc1, pc2, x1 = 0, x2 = 0, x1 ? x2,
0    0    0    true    true    x1 = x2
1    1    0    false   true    x1 > x2
2    0    1    true    false   x1 < x2
3    1    1    false   false   x1 < x2
4    2    0    false   true    x1 > x2
5    0    2    true    false   x1 < x2
6    1    1    false   false   x1 > x2
7    2    1    false   false   x1 < x2
8    1    2    false   false   x1 > x2
9    0    1    true    false   x1 > x2
10   1    0    false   true    x1 < x2
11   0    2    true    false   x1 > x2
12   2    0    false   true    x1 < x2

transitions:
0  -- t1_1 -> 1
0  -- t1_2 -> 2
1  -- t2_1 -> 3
1  -- t1_2 -> 4
2  -- t2_2 -> 5
2  -- t1_1 -> 6
3  -- t2_1 -> 7
4  -- t3_1 -> 0
4  -- t1_2 -> 7
5  -- t3_2 -> 0
5  -- t1_1 -> 8
6  -- t2_2 -> 8
7  -- t3_1 -> 2, 9
8  -- t3_2 -> 1, 10
9  -- t2_2 -> 11
9  -- t1_1 -> 6
10 -- t2_1 -> 12
10 -- t1_2 -> 6
11 -- t3_2 -> 0
11 -- t1_1 -> 8
12 -- t3_1 -> 0
12 -- t2_1 -> 7

worklist: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 |

==========================================================================
How is that thing you build a proof ???

inductive invariant.

why is it correct ? how can you use inequality and still by correct.

assumption: unbounded integers, interleaving semantic where one line of code is atomic.
